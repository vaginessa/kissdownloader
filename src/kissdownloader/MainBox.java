package kissdownloader;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.GraphicsEnvironment;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import netscape.javascript.JSObject;

public class MainBox extends javax.swing.JApplet {

    public static final String USER_AGENT="Mozilla/5.0 (X11; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0";
    
    /**
     * Initializes the applet main
     */
    @Override
    public void init() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainBox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        try {
            /* Create and display the applet */
            
                java.awt.EventQueue.invokeAndWait(new Runnable() {
                    @Override
                    public void run() {
                        initComponents();
                    }
                });
        } catch (InterruptedException | InvocationTargetException ex) {
            Logger.getLogger(MainBox.class.getName()).log(Level.SEVERE, null, ex);
        }
   
        Font font = null;
        
        try {
            font = Font.createFont(Font.TRUETYPE_FONT, this.getClass().getResourceAsStream("Gochi.ttf"));
        } catch (FontFormatException | IOException ex) {
            Logger.getLogger(MainBox.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        ge.registerFont(font);

        this.updateFont(this.status, font, Font.PLAIN);
        this.updateFont(this.debug_enabled, font, Font.PLAIN);
        this.updateFont(this.rem_time, font, Font.PLAIN);
        this.updateFont(this.speed, font, Font.BOLD);
        this.updateFont(this.version, font, Font.PLAIN);
        this.updateFont(this.progress, font, Font.PLAIN);
        this.updateFont(this.slots_label, font, Font.BOLD);
        this.updateFont(this.slots, font, Font.PLAIN);
        this.updateFont(this.pause_button, font, Font.BOLD);
        this.updateFont(this.stop_button, font, Font.BOLD);
        this.updateFont(this.cbc_check, font, Font.PLAIN);
        this.updateFont(this.keep_temp, font, Font.PLAIN);
        
        this.version.setText("This is Kissdownloader 0.1.0");
        this.slots.setVisible(false);
        this.slots_label.setVisible(false);
        this.slots.setModel(new SpinnerNumberModel(Downloader.DEFAULT_WORKERS, Downloader.MIN_WORKERS, Downloader.MAX_WORKERS, 1));
        ((JSpinner.DefaultEditor)this.slots.getEditor()).getTextField().setEditable(false);
        this.cbc_check.setVisible(false);
        this.pause_button.setVisible(false);
        this.stop_button.setVisible(false);
        this.speed.setForeground(new Color(0,128,255));
        this.speed.setVisible(false);
        this.rem_time.setVisible(false);
        this.progress.setVisible(false);
        this.keep_temp.setVisible(false);
        
        
        JSObject win = (JSObject) JSObject.getWindow(this);
        
        win.eval("hide_applet_spinner();");
      
        this.down = new Downloader(this, (String)win.eval("window.location.href;"), getParameter("debug")!=null?getParameter("debug").toLowerCase().equals("true"):false);
               
        
        /* Let's dance */
        
        this.down.start();
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser = new javax.swing.JFileChooser();
        progress = new javax.swing.JProgressBar();
        status = new javax.swing.JLabel();
        speed = new javax.swing.JLabel();
        version = new javax.swing.JLabel();
        pause_button = new javax.swing.JButton();
        slots = new javax.swing.JSpinner();
        slots_label = new javax.swing.JLabel();
        cbc_check = new javax.swing.JCheckBox();
        debug_enabled = new javax.swing.JLabel();
        rem_time = new javax.swing.JLabel();
        stop_button = new javax.swing.JButton();
        keep_temp = new javax.swing.JCheckBox();

        progress.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N

        status.setFont(new java.awt.Font("Verdana", 2, 22)); // NOI18N
        status.setText("status");

        speed.setFont(new java.awt.Font("Verdana", 3, 58)); // NOI18N
        speed.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        speed.setText("speed");

        version.setFont(new java.awt.Font("Verdana", 2, 14)); // NOI18N
        version.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        version.setText("This is Kissdownloader");

        pause_button.setBackground(new java.awt.Color(255, 153, 0));
        pause_button.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        pause_button.setForeground(java.awt.Color.white);
        pause_button.setText("PAUSE DOWNLOAD");
        pause_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pause_buttonMouseClicked(evt);
            }
        });

        slots.setFont(new java.awt.Font("Verdana", 1, 22)); // NOI18N
        slots.setToolTipText("Slots");
        slots.setValue(kissdownloader.Downloader.DEFAULT_WORKERS);
        slots.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slotsStateChanged(evt);
            }
        });

        slots_label.setFont(new java.awt.Font("Dialog", 1, 22)); // NOI18N
        slots_label.setText("Slots");

        cbc_check.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        cbc_check.setSelected(true);
        cbc_check.setText("Check file integrity");

        debug_enabled.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        debug_enabled.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        rem_time.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        rem_time.setText("remaining_time");

        stop_button.setBackground(new java.awt.Color(255, 0, 0));
        stop_button.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        stop_button.setForeground(java.awt.Color.white);
        stop_button.setText("STOP DOWNLOAD");
        stop_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stop_buttonMouseClicked(evt);
            }
        });

        keep_temp.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        keep_temp.setSelected(true);
        keep_temp.setText("Keep temp file");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(debug_enabled, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(version, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(progress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(slots_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(slots, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(rem_time)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cbc_check))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(speed, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(stop_button, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(keep_temp))
                                    .addComponent(pause_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(status)
                    .addComponent(slots, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(slots_label))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rem_time)
                    .addComponent(cbc_check))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progress, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(speed)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pause_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(stop_button)
                            .addComponent(keep_temp))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(version, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(debug_enabled)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void pause_buttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pause_buttonMouseClicked
        
        if(this.down.isPause()) {
            
            this.status.setText("Resuming download ...");
            this.pause_button.setEnabled(false);
            
            this.down.setPause(false);
            
            synchronized(this.down.getPauseLock()) {
                this.down.getPauseLock().notifyAll();
            }
            
            this.down.setPaused_workers(0);
            
            this.status.setText("Downloading file from mega.co.nz ...");
            this.speed.setEnabled(true);
            this.slots_label.setEnabled(true);
            this.slots.setEnabled(true);
            this.cbc_check.setEnabled(true);
            this.stop_button.setVisible(false);
            this.keep_temp.setVisible(false);
            this.pause_button.setEnabled(true);
            this.pause_button.setText("PAUSE DOWNLOAD");
            
        } else {

            this.status.setText("Pausing download...");
            this.pause_button.setEnabled(false);
            this.speed.setEnabled(false);
            this.slots_label.setEnabled(false);
            this.slots.setEnabled(false);
            this.cbc_check.setEnabled(false);
            
            this.down.setPause(true); 
        }
    }//GEN-LAST:event_pause_buttonMouseClicked

    private void slotsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slotsStateChanged
    
       Executors.newCachedThreadPool().execute(() -> {

            if(!this.down.isExit()) {

            int sl = (int)MiscTools.swingGetValue(this.slots);

            int cdownloaders = this.down.getChunkdownloaders().size();

            if(sl != cdownloaders) {

                if(sl > cdownloaders) {

                    this.down.startSlot();

                } else {

                    this.down.stopLastStartedSlot();
                }
            }

        }});
    }//GEN-LAST:event_slotsStateChanged

    private void stop_buttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stop_buttonMouseClicked
        
        if(!this.down.isExit()) {
            this.down.stopDownloader();
        }
    }//GEN-LAST:event_stop_buttonMouseClicked
    
    private void updateFont(javax.swing.JComponent label, Font font, int layout)
    {
        label.setFont(font.deriveFont(layout, label.getFont().getSize()));
    }
    
    private Downloader down;
    
    public void stopDownloader()
    {
        if(!this.down.isExit()) {
            this.down.stopDownloader();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JCheckBox cbc_check;
    protected javax.swing.JLabel debug_enabled;
    protected javax.swing.JFileChooser jFileChooser;
    protected javax.swing.JCheckBox keep_temp;
    protected javax.swing.JButton pause_button;
    protected javax.swing.JProgressBar progress;
    protected javax.swing.JLabel rem_time;
    protected javax.swing.JSpinner slots;
    protected javax.swing.JLabel slots_label;
    protected javax.swing.JLabel speed;
    protected javax.swing.JLabel status;
    protected javax.swing.JButton stop_button;
    private javax.swing.JLabel version;
    // End of variables declaration//GEN-END:variables
}
